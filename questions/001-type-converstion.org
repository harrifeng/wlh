* 类型转换
  + 题目
    #+begin_example
      有两个变量a和b，在执行了如下代码后：

      a = 32768;
      b = a;
      printf("%d %d\n", a, b);
      输出两个数：32768 -32768

      请问a和b分别是以下哪种类型？

      A. bool   B. char   C. short   D. int   E. float   F. double
    #+end_example
  + 理解这个题目需要一些计算机的基础知识:
    - c++这个语言的诞生是在c的基础之上,增加了模板编程(stl都是使用模板编程),面向对
      象编程,并且提供了标准库(standard library)
    - c++之所以流行,是因为它和纯c百分之百兼容
    - 在c++之前,几乎所有的代码都是c写的
    - c之所以能够发展起来,是因为c是用来替代汇编语言的.
    - 最早所有的代码都是汇编语言写的,可以说汇编语言是最底层的了,因为汇编的语句都
      是cpu开发商(比如英特尔)设计的
    - c为了能够和汇编配合的比较好(同时为了节省资源),所以很多概念都非常的底层,就是
      为了能够把"老的用汇编写的代码"改编成"用c写的代码"
  + 好,下面来看看c是如何和底层设计联系起来的:
  + 首先看看x-bit的概念
    - 计算机分成'x-bit机',意思是cpu一次处理的二进制数据长度是多少(这句比较难以理
      解,可以回来再看)
    - 最早的计算机是8bit的(注意是bit,不是byte,一个byte等于8个bit,所以电信公司很鸡
      贼,它给你家的宽带标注的是10Mb,是小b,所以你下载最多只能下载到1.25MB,因为计算
      机上面都是用大B). 比如早期的游戏机红白机,我们小时候就叫"8位机"
    - 后来短暂的出现了16bit机.世嘉土星游戏机就是16位机
    - 流行时间最长的就是32bit机,从80386开始,一直到几年前,都是32bit机
    - 现在是64bit机时代
  + c语言为了能够兼容,设计出完整的匹配上面x-bit的类型:
    - bool: 1bit
    - char: 8bit
    - short: 8bit
    - int: 32bit(在32位机器上面), 64bit(在64位机器上面)
    - long: 64bit
  + 但是,我们的时间是有正数和负数的,所以这个时候就需要拿出一个bit来用来做符号,所
    以真正能用的位置是(bool不需要符号)
    - char: 7bit
    - short: 7bit
    - int: 31bit(在32位机器上面), 63bit(在64位机器上面)
    - long: 63bit
  + 说到符号,另外一个令人头大的概念又出来了
